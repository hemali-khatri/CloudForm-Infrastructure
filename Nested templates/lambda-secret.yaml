AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda and SecretsManager for RDS password

Resources:
  DBSecret:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Delete
    Properties:
      Name: rds-db-credentials3
      Description: Auto-generated RDS credentials
      GenerateSecretString:
        SecretStringTemplate: '{"username":"admin"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '"@/''"'

  SecretReaderFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: [lambda.amazonaws.com, ec2.amazonaws.com]
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: SecretsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "*"

  SecretReaderFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Handler: index.handler
      Role: !GetAtt SecretReaderFunctionRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import boto3, json, urllib.request
          def send_response(event, context, status, data, physical_id):
              body = {
                  "Status": status,
                  "Reason": f"See logs: {context.log_stream_name}",
                  "PhysicalResourceId": physical_id,
                  "StackId": event["StackId"],
                  "RequestId": event["RequestId"],
                  "LogicalResourceId": event["LogicalResourceId"],
                  "Data": data or {}
              }
              req = urllib.request.Request(
                  event["ResponseURL"],
                  data=json.dumps(body).encode("utf-8"),
                  method="PUT",
                  headers={"Content-Type": "", "Content-Length": str(len(json.dumps(body)))}
              )
              try:
                  urllib.request.urlopen(req)
              except Exception as e:
                  print("Failed to send response:", str(e))

          def handler(event, context):
              sm = boto3.client("secretsmanager")
              secret_arn = event["ResourceProperties"].get("SecretArn")
              try:
                  resp = sm.get_secret_value(SecretId=secret_arn)
                  pwd = json.loads(resp["SecretString"])["password"]
                  send_response(event, context, "SUCCESS", {"Password": pwd}, secret_arn)
              except Exception as e:
                  send_response(event, context, "FAILED", {"Message": str(e)}, secret_arn or "None")

  FetchSecretPassword:
    Type: Custom::GetSecretPassword
    Properties:
      ServiceToken: !GetAtt SecretReaderFunction.Arn
      SecretArn: !Ref DBSecret

Outputs:
  DbSecretArn:
    Value: !Ref DBSecret
