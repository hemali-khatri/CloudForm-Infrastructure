AWSTemplateFormatVersion: '2010-09-09'
Description: Master stack with CI/CD pipeline for nested infrastructure (VPC, Security, Lambda, RDS, Backend, Frontend)

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.4.0/24
  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2CIDR:
    Type: String
    Default: 10.0.3.0/24
  BastionHostIP:
    Type: String
    Default: 203.0.113.42/32
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
  NestedTemplateBaseURL:
    Type: String
    Default: https://cloudform-nested-template1.s3.us-east-1.amazonaws.com
    Description: Base URL for all nested CloudFormation templates
  AppName:
    Type: String
    Default: uls
    Description: User List Service
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - uat
      - prod
    Description: Environment name for resources
  NotificationEmail:
    Type: String
    Default: hemali.khatri@tatvasoft.com
    Description: Email for budget and CloudWatch/CloudTrail alerts

  GitHubConnectionArn:
    Type: String
    Default: arn:aws:codeconnections:us-east-1:410970225374:connection/fef028b3-cc24-4bfe-a884-3944dac3a3de
  GitHubRepo:
    Type: String
    Default: hemali-khatri/CloudForm-infra   # repo where all templates live
  GitHubBranch:
    Type: String
    Default: main

Conditions:
  IsProd: !Equals [!Ref Environment, prod]

Resources:

  #########################
  # Nested Stacks
  #########################

  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${NestedTemplateBaseURL}/vpc.yaml"
      Parameters:
        VpcCIDR: !Ref VpcCIDR
        PublicSubnet1CIDR: !Ref PublicSubnet1CIDR
        PublicSubnet2CIDR: !Ref PublicSubnet2CIDR
        PrivateSubnet1CIDR: !Ref PrivateSubnet1CIDR
        PrivateSubnet2CIDR: !Ref PrivateSubnet2CIDR
        AppName: !Ref AppName
        Environment: !Ref Environment
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: App
          Value: !Ref AppName

  SecurityStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${NestedTemplateBaseURL}/security.yaml"
      Parameters:
        VPCID: !GetAtt VPCStack.Outputs.VPCID
        AppName: !Ref AppName
        Environment: !Ref Environment
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: App
          Value: !Ref AppName

  LambdaSecretStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${NestedTemplateBaseURL}/lambda-secret.yaml"
      Parameters:
        AppName: !Ref AppName
        Environment: !Ref Environment
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: App
          Value: !Ref AppName

  RDSStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${NestedTemplateBaseURL}/rds.yaml"
      Parameters:
        SubnetIds: !GetAtt VPCStack.Outputs.PrivateSubnetIds
        RDSSecurityGroup: !GetAtt SecurityStack.Outputs.RDSSecurityGroup
        DBSecretArn: !GetAtt LambdaSecretStack.Outputs.DbSecretArn
        CloudTrailArn: !GetAtt CloudTrail.Arn
        AppName: !Ref AppName
        Environment: !Ref Environment
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: App
          Value: !Ref AppName

  BackendStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
    - RDSStack
    - LambdaSecretStack
    Properties:
      TemplateURL: !Sub "${NestedTemplateBaseURL}/backend.yaml"
      Parameters:
        VPC: !GetAtt VPCStack.Outputs.VPCID
        PrivateSubnet1: !GetAtt VPCStack.Outputs.PrivateSubnet1
        PrivateSubnet2: !GetAtt VPCStack.Outputs.PrivateSubnet2
        PublicSubnet1: !GetAtt VPCStack.Outputs.PublicSubnet1
        PublicSubnet2: !GetAtt VPCStack.Outputs.PublicSubnet2
        BastionHostIP: !Ref BastionHostIP
        KeyName: !Ref KeyName
        GitHubConnectionArn: !Ref GitHubConnectionArn
        GitHubBranch: !Ref GitHubBranch
        DBSecretArn: !GetAtt LambdaSecretStack.Outputs.DbSecretArn
        RdsEndpoint: !GetAtt RDSStack.Outputs.RdsEndpoint
        EC2SecurityGroup: !GetAtt SecurityStack.Outputs.EC2SecurityGroup
        ALBSecurityGroup: !GetAtt SecurityStack.Outputs.ALBSecurityGroup
        AppName: !Ref AppName
        Environment: !Ref Environment
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: App
          Value: !Ref AppName

  FrontendStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${NestedTemplateBaseURL}/frontend.yaml"  # Replace with your actual frontend template S3 URL
      Parameters:
        GitHubConnectionArn: !Ref GitHubConnectionArn
        GitHubBranch: !Ref GitHubBranch
        BackendAPIURL: !GetAtt BackendStack.Outputs.BackendAPIURL
        AppName: !Ref AppName
        Environment: !Ref Environment
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: App
          Value: !Ref AppName

  MonitoringStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${NestedTemplateBaseURL}/monitoring-logging.yaml"
      Parameters:
        BackendASGName: !GetAtt BackendStack.Outputs.ASGName
        BackendALBArn: !GetAtt BackendStack.Outputs.BackendALBArn
        BackendEC2SecurityGroup: !GetAtt BackendStack.Outputs.BackendEC2SecurityGroup
        RDSInstanceIdentifier: !GetAtt RDSStack.Outputs.RDSInstanceIdentifier
        AlarmEmail: hemali.khatri@tatvasoft.com
        AppName: !Ref AppName
        Environment: !Ref Environment

  #########################
  # CI/CD Pipeline
  #########################
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-${Environment}-codepipeline-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess

  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketName: !Sub "${AppName}-${Environment}-artifacts"

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              Configuration:
                ConnectionArn: !Ref GitHubConnectionArn
                FullRepositoryId: !Ref GitHubRepo
                BranchName: !Ref GitHubBranch
              OutputArtifacts:
                - Name: SourceOutput

        - Name: ManualApproval
          Actions:
            - Name: ApproveDeployment
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
              RunOrder: 1

        - Name: Deploy
          Actions:
            - Name: CFNDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: MasterInfraStack
                TemplatePath: SourceOutput::parent.yaml
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !GetAtt PipelineRole.Arn
                ParameterOverrides: |
                  {
                    "AppName": "${AppName}",
                    "Environment": "${Environment}"
                  }
              InputArtifacts:
                - Name: SourceOutput
              RunOrder: 2

  #################################
  # CloudTrail Logging
  # #################################
  # CloudTrailBucket:
  #   Type: AWS::S3::Bucket
  #   DeletionPolicy: Retain
  #   Properties:
  #     BucketName: !Sub "${AppName}-${Environment}-cloudtrail-logs"
  #     VersioningConfiguration:
  #       Status: Enabled
  #     BucketEncryption:
  #       ServerSideEncryptionConfiguration:
  #         - ServerSideEncryptionByDefault:
  #             SSEAlgorithm: AES256
  #     PublicAccessBlockConfiguration:
  #       BlockPublicAcls: true
  #       BlockPublicPolicy: true
  #       IgnorePublicAcls: true
  #       RestrictPublicBuckets: true

  # CloudTrailBucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref CloudTrailBucket
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Sid: AWSCloudTrailAclCheck
  #           Effect: Allow
  #           Principal:
  #             Service: cloudtrail.amazonaws.com
  #           Action: s3:GetBucketAcl
  #           Resource: !Sub arn:aws:s3:::${AppName}-${Environment}-cloudtrail-logs
  #         - Sid: AWSCloudTrailWrite
  #           Effect: Allow
  #           Principal:
  #             Service: cloudtrail.amazonaws.com
  #           Action: s3:PutObject
  #           Resource: !Sub arn:aws:s3:::${AppName}-${Environment}-cloudtrail-logs/AWSLogs/${AWS::AccountId}/*
  #           Condition:
  #             StringEquals:
  #               s3:x-amz-acl: bucket-owner-full-control

  # CloudTrail:
  #   Type: AWS::CloudTrail::Trail
  #   Properties:
  #     TrailName: !Sub "${AppName}-${Environment}-cloudtrail"
  #     S3BucketName: !Ref CloudTrailBucket
  #     IsLogging: true
  #     IncludeGlobalServiceEvents: true
  #     IsMultiRegionTrail: true
  #     EnableLogFileValidation: true

  #################################
  # SNS for Notifications
  #################################
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${AppName}-${Environment}-alerts"
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail

Outputs:
  FrontendWebsiteURL:
    Value: !GetAtt FrontendStack.Outputs.WebsiteURL
  BackendAPIURL:
    Value: !GetAtt BackendStack.Outputs.BackendAPIURL
  RdsEndpoint:
    Value: !GetAtt RDSStack.Outputs.RdsEndpoint
  DBSecretArn:
    Value: !GetAtt LambdaSecretStack.Outputs.DbSecretArn
  Environment:
    Value: !Ref Environment
    Description: Environment for this stack
  AlertTopicArn:
    Value: !Ref AlertTopic
    Description: SNS Topic for budget/monitoring alerts
  CloudTrailName:
    Value: !Ref CloudTrail
    Description: CloudTrail enabled for auditing
